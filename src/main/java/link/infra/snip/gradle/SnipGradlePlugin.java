/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package link.infra.snip.gradle;

import org.codehaus.groovy.runtime.InvokerHelper;
import org.gradle.api.Action;
import org.gradle.api.Project;
import org.gradle.api.Plugin;
import org.gradle.api.artifacts.Configuration;
import org.gradle.api.file.FileCollection;
import org.gradle.api.file.SourceDirectorySet;
import org.gradle.api.internal.project.ProjectInternal;
import org.gradle.api.internal.tasks.DefaultScalaSourceSet;
import org.gradle.api.plugins.Convention;
import org.gradle.api.plugins.JavaPlugin;
import org.gradle.api.plugins.JavaPluginConvention;
import org.gradle.api.tasks.SourceSet;
import org.gradle.api.tasks.SourceSetContainer;
import org.gradle.plugins.ide.eclipse.EclipsePlugin;
import org.gradle.plugins.ide.idea.IdeaPlugin;

import java.util.HashMap;
import java.util.Map;

public class SnipGradlePlugin implements Plugin<Project> {
	public void apply(Project project) {
		// Apply default plugins
		project.getPluginManager().apply(JavaPlugin.class);
		project.getPluginManager().apply(EclipsePlugin.class);
		project.getPluginManager().apply(IdeaPlugin.class);

		SnipExtension ext = project.getExtensions().create("snip", SnipExtension.class, project);

		final JavaPluginConvention javaPlugin = project.getConvention().getPlugin(JavaPluginConvention.class);
		final SourceSet main = javaPlugin.getSourceSets().getByName("main");

		project.getConvention().getPlugin(JavaPluginConvention.class).getSourceSets().all(sourceSet -> {
			String displayName = (String) InvokerHelper.invokeMethod(sourceSet, "getDisplayName", null);
			Convention sourceSetConvention = (Convention) InvokerHelper.getProperty(sourceSet, "convention");
			DefaultScalaSourceSet scalaSourceSet = new DefaultScalaSourceSet(displayName, project.getObjects());
			sourceSetConvention.getPlugins().put("scala", scalaSourceSet);

			final SourceDirectorySet scalaDirectorySet = scalaSourceSet.getScala();
			scalaDirectorySet.srcDir(project.file("src/" + sourceSet.getName() + "/scala"));
			sourceSet.getAllJava().source(scalaDirectorySet);
			sourceSet.getAllSource().source(scalaDirectorySet);

			// Explicitly capture only a FileCollection in the lambda below for compatibility with instant-execution.
			FileCollection scalaSource = scalaDirectorySet;
			sourceSet.getResources().getFilter().exclude(
				spec(element -> scalaSource.contains(element.getFile()))
			);

			configureScalaCompile(project, sourceSet, incrementalAnalysis, incrementalAnalysisUsage);
		});

		project.getTasks().register("snipCompile", CompileTask.class, task -> {
			task.setGroup("documentation");
			task.sourcesDir.source(main.getAllJava());
			task.outputDir.set(project.file("$buildDir/snip/"));
		});


	}
}
